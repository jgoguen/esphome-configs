---
api:
  services:
    - service: stop_alarm
      then:
        - lambda: 'id(alarm_state) = false;'
        - rtttl.stop
    - service: start_alarm
      variables:
        song_str: string
      then:
        - logger.log:
            level: DEBUG
            tag: '${name}.start_alarm'
            format: 'Starting alarm'
        - lambda: 'id(alarm_state) = true;'
        - while:
            condition:
              lambda: 'return id(alarm_state) == true;'
            then:
              - logger.log:
                  level: DEBUG
                  tag: '${name}.start_alarm'
                  format: 'Playing alarm'
              - rtttl.play:
                  rtttl: !lambda 'return song_str;'
              - wait_until:
                  not: rtttl.is_playing

globals:
  # 0 = off
  # 1 = alarm
  - id: alarm_state
    type: bool
    restore_value: false
    initial_value: 'false'

# This requires an output component with id buzzer_output
rtttl:
  output: buzzer_output
  id: buzzer
