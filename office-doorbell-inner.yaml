---
# vim: filetype=esphome:syntax=yaml:ts=2:sts=2:sw=2:expandtab:autoindent:nospell
substitutions:
  name: work_state_desk
  sensor_location: Office Desk
  api_timeout: '600'

<<:
  - !include common/m5-stick-cplus.yaml
  - !include common/office-doorbell.yaml

packages: !include_dir_named packages

globals:
  # 0 = not working
  # 1 = working
  # 2 = do not disturb
  - id: state_val
    type: int
    restore_value: false
    initial_value: "0"
  # 0 = normal
  # 1 = attention wanted
  - id: request_val
    type: bool
    restore_value: false
    initial_value: "false"

script:
  - id: synchronize_state
    mode: restart
    then:
      - logger.log:
          level: DEBUG
          tag: officestatus
          format: 'state=%d request=%d'
          args:
            - 'id(state_val)'
            - 'id(request_val)'
      - if:
          condition:
            lambda: 'return id(request_val) == true;'
          then:
            - logger.log:
                level: DEBUG
                tag: officestatus
                format: 'Requesting attention'
            - light.turn_on:
                id: status_led
                effect: Request
            - if:
                condition:
                  lambda: 'return id(state_val) != 2;'
                then:
                  - logger.log:
                      level: DEBUG
                      tag: officestatus
                      format: 'Turning buzzer on'
                  - output.turn_on: buzzer
                  - output.ledc.set_frequency:
                      id: buzzer
                      frequency: '800Hz'
                  - output.set_level:
                      id: buzzer
                      level: '50%'
          else:
            - if:
                condition:
                  lambda: 'return id(state_val) == 0;'
                then:
                  - light.turn_on:
                      id: status_led
                      effect: Break
                  - text_sensor.template.publish:
                      id: state
                      state: Break
            - if:
                condition:
                  lambda: 'return id(state_val) == 1;'
                then:
                  - light.turn_on:
                      id: status_led
                      effect: Work
                  - text_sensor.template.publish:
                      id: state
                      state: Work
            - if:
                condition:
                  lambda: 'return id(state_val) == 2;'
                then:
                  - light.turn_on:
                      id: status_led
                      effect: DND
                  - text_sensor.template.publish:
                      id: state
                      state: DND
            - component.update: tft_display

switch:
  - platform: template
    id: request
    name: Request Attention
    icon: mdi:lightbulb
    lambda: 'return id(request_val) == true;'
    turn_on_action:
      - lambda: 'id(request_val) = true;'
      - script.execute: synchronize_state
    turn_off_action:
      - lambda: 'id(request_val) = false;'
      - script.execute: synchronize_state

text_sensor:
  - platform: template
    id: state
    name: Working State
    icon: mdi:office-building
    lambda: |-
      switch (id(state_val)) {
        case 0:
          return {"Break"};
          break;
        case 1:
          return {"Work"};
          break;
        case 2:
          return {"DND"};
          break;
      }
      return {};

sensor:
  - platform: homeassistant
    name: 'HomeAssistant state selector'
    entity_id: input_number.office_working_state
    on_value:
      then:
        - lambda: 'id(state_val) = (int)x % 3;'
        - script.execute: synchronize_state

binary_sensor:
  - platform: homeassistant
    id: ${name}_door_button_monitor
    entity_id: binary_sensor.office_door_main_button
    on_state:
      then:
        - lambda: |-
            if(x == 1) {
              id(request_val) = true;
            }
        - script.execute: synchronize_state
  - platform: homeassistant
    name: 'HomeAssistant Virtual Main Button'
    internal: true
    entity_id: input_boolean.office_desk_virtual_main_button
    on_state:
      then:
        - lambda: |-
            if (x == 1) {
              id(state_val) = (id(state_val) + 1) % 3;
            }
        - script.execute: synchronize_state

  - platform: gpio
    pin:
      number: GPIO37
      inverted: true
    id: ${name}_button_a
    name: ${sensor_location} Main Button
    on_press:
      then:
        - if:
            condition:
              lambda: 'return id(request_val) == true;'
            then:
              - lambda: 'id(request_val) = false;'
              - output.turn_off: buzzer
            else:
              - lambda: 'id(state_val) = (id(state_val) + 1) % 3;'
        - script.execute: synchronize_state
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    id: ${name}_button_b
    name: ${sensor_location} Secondary Button
    on_press:
      then:
        - lambda: 'id(request_val) = false;'
        - output.turn_off: buzzer
        - script.execute: synchronize_state

display:
  - platform: st7789v
    id: tft_display
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO23
    reset_pin: GPIO18
    rotation: 90
    lambda: |-
      it.print(it.get_width() / 2, 5, id(font_medium), id(white), TextAlign::TOP_CENTER, "Office Status");
      switch (id(state_val)) {
        case 0:
          it.print(
            it.get_width() / 2,
            it.get_height() / 2,
            id(font_large),
            id(green),
            TextAlign::CENTER,
            "Not Working"
          );
          break;
        case 1:
          it.print(it.get_width() / 2, it.get_height() / 2, id(font_large), id(yellow), TextAlign::CENTER, "Working");
          break;
        case 2:
          it.print(it.get_width() / 2, it.get_height() / 2 - 10, id(font_large), id(red), TextAlign::CENTER, "Do not");
          it.print(it.get_width() / 2, it.get_height() / 2 + 18, id(font_large), id(red), TextAlign::CENTER, "Disturb");
          break;
        default:
          it.print(it.get_width() / 2, it.get_height() / 2 - 10, id(font_large), id(red), TextAlign::CENTER, "???");
          break;
      }
      it.strftime(
        it.get_width() / 2,
        it.get_height() - 5,
        id(font_medium),
        id(blue),
        TextAlign::BASELINE_CENTER,
        "%H:%M",
        id(sntp_time).now()
      );
